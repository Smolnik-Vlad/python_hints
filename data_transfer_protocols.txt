127.0.0.1 - локальный xост (localhost - с порта на порт на одном девайсе)
192.168.?.? - локальная сеть
через IP -  внешняя сеть

https://colab.research.google.com/drive/1SaC-Sx4VvvKQ1FhSQWJzBetk-80KTHjD?usp=sharing#scrollTo=FXFyODXS1o4f
Типы передачи данных (уровни):
1. Физический
2. Канальный
3. Сетьевой (IP уровень) (то есть уже можно выбрать, куда кидать)
4. Транспортный (использует пакеты)
	TCP (отправляет по одному пакету, ждет подтверждение , что пакет доставлен. Будет слать пакет, пока не получит ответ, либо пока не закончится timeout)
	UDP (просто швыряет пакеты, не ожидая ответов)

5. Сеансовый - устанавливается сессия (общение между двумя портами, порты знают друг о друге)
6. Представления - (если и принимающая, и отправляющая сторона знают, что они получают/отправляют) (отправляются не просто байты, а уже структуры, могут быть зашифрованы)
7. Уровень приложений (HTTP, FTP) - сетевые приложения, один порт разбивает большой проект на маленькие, передает второму, второй собирает из этого всего объект(header(вся инфа), body(реализация), при этом они "разговаривают на одном языке")




Сервера, которые возвр json называются API (бэкенд)
Сервера, которые возвр HTML - назыв сайты (фронтенд)

HTTP состоит из head, body

Все про header
В строке запроса: протокол, абсолютная ссылка, относительная ссылка, доп параметры
URL:protocolid/site/endpoints?params  (site:name.zone   google.com)


methods: crud (методы, название которых передаетсяы)
requests - библиотека
endpoint - конечная точка в url
api - бек, который возвращает что-то
X-api-key
status коды:
200-299 - успешные 



	ПОнятия, которые нужно повторять и уяснять:
Разобраться с IP и сетью

URL, HTTP, URL(протокол/site/endpoints?params)


URL (протокол//доменное_Имя или id. : port./ путь к файлу и эндпоинт?критерии)

Повторить распаковку


djinga 2, makefile, apikey, правила коммитов, секрет
