1. Команда: SELECT, UPDATE, INSERT, DELETE
2. Где: FROM name_of_table as t
   JOIN Ganre ON
3. Фильтр 1: Where
4. Группировка: GROUP
5. Фильтр 2: HAVING (после группировки)
6. Сортировка: ORDERED BY name DESC(переворот), name_of_table
7. LIMIT 20 OFFSET 5 - верни мне 20 записей начиная с 5 

Пример:
SELECT Name
From Track
Where Name Like '%no' and id=7 and id in (1, 2) (в списке може вызываться другой запрос)

	Создание таблицы: 

CREATE TABLE genre(
    genre_id INT PRIMARY KEY AUTO_INCREMENT, 
    name_genre VARCHAR(30)
);

	Вставка записи в таблицу
INSERT INTO таблица(поле1, поле2) 
VALUES (значение1, значение2);

Шабон:
SELECT ...
FROM name_of_table
GROUP BY ...
WHERE ...



		Запросы (SELECT)


Select * FROM table - вывод полной таблицы
SELECT title, amount FROM book; - вывод данных из определенных столбцов
SELECT title AS name - возвращает таблицу с title, title переименован в name
SELECT DISTINCT author FROM book; - выборка неповторяющихся элементов
SELECT price * amount AS total FROM book; - вычисления, то есть получаем новый столбец total = price*amount

Создание нового столбца с условиями
SELECT title, amount, price, 
    IF(amount<4, price*0.5, price*0.7) AS sale - условие, если меньше 4 то *0,5, в противном случае 0,7
    ROUND(IF(amount < 4, price * 0.5, IF(amount < 11, price * 0.7, price * 0.9)), 2) AS sale - усложненная версия
FROM book;



	Запросы с условиями
SELECT title, price 
FROM book
WHERE price < 600; - условие
WHERE (author = 'Булгаков М.А.' OR author = 'Есенин С.А.') AND price > 600; - с and и or
WHERE amount BETWEEN 5 AND 14; - в интервале между 5 и 14
WHERE author IN ('Булгаков М.А.', 'Достоевский Ф.М.'); - позволяет выбрать данные, соответствующие значениям из списка.
WHERE title LIKE 'Б%'; - title содержит подстроку, после Б один и долее символ
WHERE title LIKE "_____" - "_" обозначает любой одиночный символ
WHERE title NOT LIKE "% %"

	Запросы с способом вывода (ORDERED BY)
SELECT amount AS Количество FROM book
ORDER BY author, amount DESC;    - отсортировано по author и amount в обратном порядке
ORDER BY 1, 3 DESC; - 1, 3 - номера коллонок


		Запросы с группировкой (обязательно, чтобы было GROUP BY)

SELECT  author FROM book
GROUP BY author - эквивалентно DISTINT

SELECT author, sum(amount), count(amount) - sum(amount) - функция, сумирующая значения подргуппы, count(amount) - функция, подсчитывающая количество 
FROM book
GROUP BY author;

COUNT(*) —  подсчитывает  все записи, относящиеся к группе, в том числе и со значением NULL;
COUNT(имя_столбца) — возвращает количество записей конкретного столбца (только NOT NULL), относящихся к группе.

SELECT author, MIN(price), MAX(price), AVG(price) - вычисляют минимальное, максимальное и среднее значение элементов столбца, относящихся к группе.
...

SELECT author, ROUND(AVG(price),2) AS Средняя_цена - говорит о том, что Групповые функции могут быть элементами выражений.
SELECT author, SUM(price * amount) AS Стоимость

Можно так же делать без GROUP, тогда будут считаться все элементы коллонки:
SELECT SUM(amount) AS Количество
FROM book;	

В выборке с группировкой вместо условия WHERE используется HAVING: HAVING SUM(price * amount) > 5000; 

#пример, в котором сливаются WHERE и HAVING:
SELECT author,
    MAX(price) AS Максимальная_цена
FROM book
WHERE author <> 'Есенин С.А.'
GROUP BY author
HAVING SUM(amount) > 10;

ОБРАТИТЬ ВНИМАНИЕ НА ТО, ЧТО ВСЕ ЗАПРОСЫ ДЕЛАЮТСЯ ТОЛЬКО В HAVING ИЛИ SELECT


		Вложенные запросы
Select ... FROM ...
WHERE price = (			- то есть внутренний запрос возвращает значение, от которого можно отталкиваться 
SELECT MIN(price)
FROM book
)
WHERE ABS(amount - (SELECT AVG(amount) FROM book)) >3;	

SELECT author, title, amount FROM book - хороший пример, в котором нужно вывести инфу о книгах,  количество экземпляров которых в таблице не дублируется.
WHERE amount in (
    SELECT amount from book
    GROUP BY amount
    HAVING count(amount) = 1
);


Select title, (			- вывод доп секции
     SELECT AVG(amount) 
     FROM book
    ) AS Среднее_количество 
    FROM book



Операторы ANY и ALL (любая из и все):		ИСПОЛЬЗУЮТСЯ ТОЛЬКО СО ВЛОЖЕННЫМИ ЗАПРОСАМИ!!!
amount = ANY (10, 12) <-> (amount = 10)
amount > ANY (10, 12) <->amount > 10
amount <> ANY (10, 12) вернет все записи с любым значением amount, включая 10 и 12

amount > ALL (10, 12) <-> amount > 12
amount = ALL (10, 12) не вернет ни одной записи, так как эквивалентно (amount = 10) AND (amount = 12)
amount <> ALL (10, 12) вернет все записи кроме тех,  в которыхamount равно 10 или 12

SELECT title, author, amount, price - Вывести информацию о тех книгах, количество которых меньше самого маленького среднего количества книг каждого автора.
Запрос:
FROM book
WHERE amount < ALL (
        SELECT AVG(amount) 
        FROM book 
        GROUP BY author 
      );


	В общем и целом:
SELECT a - выбор столбца (обязательно)
SELECT DISTINCT - неповторяющиеся элементы
FROM table - из какой таблицы (обязательно)
WHERE ... - при условии (необязательно)
ORDER BY  - в порядке по указанной колонне (необязательно)
GROUP BY - сгруппировать по параметрам (колонке) (необязательно но обязательно при нескольких функциях) (полное смотреть выше)
HAVING ... - критерий при гуппировке (только при использовании GROUP BY)

